A Dialogue on Virtualization
Assume there is one physical CPU in a system. What virtualization does is take that single CPU and make
it look like many virtual CPUs to the app running on the system. Each application thinks it has each own
CPU to use.

I. Mechanism to implemnt virtualization:
Virtualization can be implemented using protocols using context switch that enables time-sharing Mechanism
The Abstraction: The process
1. Process is a running program. The OS creates virtualizing by the CPU. By running one process, then 
shopping it and running another. The OS can promote the illusion that many virtual CPU exit

Time sharing: is a basic technique used by an OS to share resource. By allowing the resource to be usedfor a
little while by one entity, and then a little while by another.
Space sharing: resource is divided among those who wish to use it. 

Policies: intelligence of these mechanism. Policies are algos for making decision within the OS. A sheduling
policy in the OS will make this decision by using historial information, workload knowledge, performance
matrices.

2. The abstraction: A process
Process: is an abstraction of a running program. 
Process has its machine state: what a program can read or update when it is running. Machines states
comprises of memory. Instruction lie in memory, the data that the running program reads and writes sits in memoryas well.
Part of the process's machine state are registers.
The program counter (PC) / instruction pointer tells us which instruciton of the program is currently being
executed. Similarly a stack pointer associated frame pointer are used to manage the stack for
function parameters, local variables, and return address.

2. Process API:
OS must in clude these functions:
-Create: create a new process.
-destroy: destroy process
-wait: wait for a process to stop running
-miscellaneous control: other process such as suspend and then resume it
-status: get some status information about a process

CPU                         Memory:
                            ------------
                             core           |
                            |static data           |  |
                            | heap          |
                            |           |
                            |
                            |   stack
                            ------------
                            Process



3. Process Creation:
First, the OS must load programs' code and any static data (initiazed variables) into memory, 
into the address space of the process. Program initially reside on a disk in an executable format. The 
process require OS to read bytes from disk and place them in memory somewhere.

In early operating system, the loading process is done eagerly, all at once before running the program.
Modern OS perform that the process lazily, by loading pieces of code or data only as they are needed during 
the program execution.

Once the code and static data are loaded into memory. Some memory must be allocated for the program's stack. For example, C program use the stack for local variables, function parameters, and return addresses. The OS allocates this memory and gives it to the process.  THe OS will also likely initialize the stack with arguments. It will fill in the parameters to the main () function via argc and the argv array
The OS may also allocate some moery for the program's heap. Program request space by calling malloc() and free by calling free(). The heap is needed for data structures such as linked lists, hash tables, trees, and other interesting data structures. The heap will be small at first, as the program runs, and request more memory via malloc() library. 
The heap's size will grow over time.
The OS will also some other initialization tasks, particularly as related to input/putput (I/O). Each process by default has three open file descriptors, for standard input, output, and error. 
By loading the code and static data into memory, by creating and initialize stack, and by doing I/O setup, the OS has set the stage for program exectution. There is one last task: to start the program running at the entry point, namely main(). By jumping to the main() routine, the OS transfer control of the CPU to the newly-created process, the program begins its execution

4. Process States:
In a simplified view, a process can be in one of these 3 states:
-Running: it is executing instructions
-Ready: In the ready state, a process is ready to run but OS choose to block it
- Blocked: A process has performed some kind of operation that makes it not ready to run until some other event request to a disk, it becomes blocked and thus some other process can use the processor.
Being moved from ready to running means the process has been scheduled; being moved from running to ready means the process has been descheduled. Once a process has become blocked, the OS will keep it as it until some event occurs. The process then moves to the ready state again.

4.5 Data structures:
To track the state of each process, the OS will keep some kind of process list for all processes that are ready. The OS will track for all processes that are ready, and which processes are running. For stopped process, the register context will content of its registers. When a process is stopped, its registers will be saved to this memory location, by storing thse registers, the OS can resume running the process.

Sometimes a system will have an initial state that the process is in when it is being created. A process could be placed in a final state where it has exited but has not yet been cleaned up. THis final state can be useful as it allows other processes to examine the return code of the process (return 0 for finished, 1 for non finished). When finished, the parent will make one final call (wait()) to wait for the completion of the child, and to also indicate to the OS that it can clean up any relevent data structures that is related to extince process 