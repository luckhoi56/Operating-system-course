Process API

5.1 The fork() System Call:
The fork() system call is used to create a new process. 
int rc = fork();

5.2 The wait() System call:
It is useful for a parent to wait for a child process to finish what it has been doing.
Adding a wait() call to the code makes the output deterministic

5.3 The exec System call
This is useful when you want to run a program that is different from the calling program. 

code snippet:

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>

int main (int argc, char *argv[])
{
    printf("hello world (pid:%d)\n", (int) getpid());
    int rc = fork();
    if (rc <0){
        fprintf(stderr, "fork failed \n");
        exit(1);
    }
    else if (rc ==0){
        printf("hello, I am child (pid:%d)\n", (int) getpid());
        char *myargs[3];
        myargs[0] = strup("wc");
        myargs[1] = strup("p3.c");
        myargs[2] = NULL;
        execvp(myargs[0], myargs);
        printf("this should't print out");

    }
    else{
        int rc_wait = wait(NULL);
        printf("hello, I am parent of %d (rc_wait:%d) (pid:%d)\n", rc, rc_wait, (int) getpid());
        
    }
    return 0;

}