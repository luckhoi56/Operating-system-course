Mechanism: Limited Direct Execution

I. Limited Direct Execution:

OS:                                         Program
Create entry for process list
Allocate memory for Program
Load program into memory
Set up stack with argc/ argv
Clear registers
Execute call main()
                                            Run main()
                                            Execute return from main
Free memory of process
Remove from process list

6.2 Problem #1: Restricted Operations:
Direct excecution is fast. The program runs natively on the hardware CPU. But running on the CPU introduces a probblem: What if the process wishes to perform some kind of restricted operation, such as issuing an I/O request to a disk, or gaining access to more system resources such as CPU or memory.

Answer: Introduce a new mode, called user mode; code that runs in a user mode is restricted in what it can do. A process can't issue I/O request, doing so would result in the processor raising an exception.
In contrast to user mode is kernel mode. In this mode, a process can do whatever it likes, including raising an exception and executing restricted instruction.

OS allow user programs to perform a system call. To execute a system call, a program must execute a special trap instruction. This instruction simultaneously jumps into the kernel and raises the privelege level to kernel mode. Once in the kernel, the system can perform the privelege instruction. When finished, the OS calls a special return-from-trap instruction, returns into the calling user program while simultaneously return to user mode 

The hardware must be carefil when executing a trap, to make sure to save enough of the caller's registers in order to be able to return correctly when do return-from-trap instruction.

Example: On x86, the processor will push the program counter, flags, and a few other registers onto kernel stacl, the RFTI will pop these values off the stack and resume the execution of the user-mode program.

The kernel must know where to jump ( which code to run inside the OS) because the the calling process cannot specify the address to jump to. The kernel does so by setting up a trap table at boot time. When the machine boots up, the OS tells the hardware what code to run when certain exception events occur (I/O). The OS informs the hardware of the locations of these trap handlers.


OS @ boot                               hardware
initialze trap table
                                        remember address of ...
                                            syscal handler

OS @ run                                hardware                            Program
(kernel mode)
Create entry for process list
Allocate memory for program
Load program into memory
Setup user stack with argv
Fill kernal stack with reg/PC
return-from trap

                                        restore regs from kernel stack
                                        move to user mode
                                        jump to main

                                                                        Run main()
                                                                        ...
                                                                        Call system call
                                                                        trap into OS

                                        save regs to kernel stack
                                        move to kernel mode
                                        jump to trap handler

Handle trap
Do work of syscal
return from trap

                                        restore regs from kernel stack
                                        move to user mode
                                        jump to PC after trap

                                                                            ...
                                                                            return from main
                                                                            trap (via exit())

Free memory of process
Remove from process list

To specify the exact system call, a system-call number is asigned to each system call. The user code is responsible for placing the desired system-call number in a register or at location on the stack. The OS when handles the system call, examines the number, ensure it is valid and executes the corresponding code. This level servers as a form of protection, user code cannot specify an exact address to jump to, but rather must request a particular service via number.

Being able to execute the instruction to tell the hardware where the trap tables are is a very powerful capability (it is also a privileged instruction). We cannot execute this instruction in user mode

The timeline summarizes the protocol. We assume each process has a kernel stack where registers are saved to and restored from (by the hardware) when transitioning into and out of the kernel

There are two phases in the limited direct exection (LDE) protocol. In the first, the kernel initializes the trap table, and the CPU remembers its location for subsequent use. The kernel does so via a priveleged instruction.

In the second (when running a process), the kernel sets up a few things before using a RFTI to start the execution of the process. This switches the CPU to user mode and begins running the process. When the process wishes to issue a system call, it traps back into the OS, which handles it and once again returns control via a RFIT. The process then completes it work, and returns from main(). The OS then call exit() traps into OS and done.

6.3 Problem 2: switching between processes
A cooperative approach: wait for system calls
For this approach, the OS trusts the processes of the system to behave resonably. Processes that run for too long are assumed to periodically give up the CPU so that the OS can decide to rum some other tasks.

The process gives up the CPU by transfer control of the CPU to the OS by making system calls.

Example: divive by zeros, or access "danger zone" memory will generate a trap to the OS. The OS will then have control of the CPU again.

Summary: The OS regains control of the CPU by waiting for a system call or an illegal operation of some kind to take place. 

Issue: If a process ends up in an infinite loop, and never makes a system call? What can the OS do then?

A Non-cooperative approach: The OS takes control

Timer Interrupt: this gives the OS the ability to run again on a CPU even if processes act in a non-cooperative fashion.  This helps the OS maintain control of the machine

The hardware, when intterupts occur, save the state of the program such that subsequent RFTI  will be able to resume running program correclly.

2. Saving and restoring context:
If the decision is made to switch, the OS then executes a low-level
piece of code which we refer to as a context switch. A context switch is
conceptually simple: all the OS has to do is save a few register values
for the currently-executing process (onto its kernel stack, for example)
and restore a few for the soon-to-be-executing process (from its kernel
stack). By doing so, the OS thus ensures that when the return-from-trap


nning, the system resumes execution of another process.
To save the context of the currently-running process, the OS will execute
some low-level assembly code to save the general purpose registers,
PC, as well as the kernel stack pointer of the currently-running process,
and then restore said registers, PC, and switch to the kernel stack for the
soon-to-be-executing process. By switching stacks, the kernel enters the
call to the switch code in the context of one process (the one that was interrupted)
and returns in the context of another (the soon-to-be-executing
one). When the OS then finally executes a return-from-trap instruction,
the soon-to-be-executing process becomes the currently-running process.
And thus the context switch is complete